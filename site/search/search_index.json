{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Covid 19 challenge repository Qick start To run the program we use some dependencies that will be installed using the following command. pip install -r requirements.txt Commands python src/python/sarscovhirarchy.py - Run main.","title":"Home"},{"location":"#welcome-to-covid-19-challenge-repository","text":"","title":"Welcome to Covid 19 challenge repository"},{"location":"#qick-start","text":"To run the program we use some dependencies that will be installed using the following command. pip install -r requirements.txt","title":"Qick start"},{"location":"#commands","text":"python src/python/sarscovhirarchy.py - Run main.","title":"Commands"},{"location":"csv_table/","text":"Csv table class class CsvTable Helps to handle .csv files data and its processing. A csv table is initialised using: csv_table = CsvTable(path_file) # file_path: The path to the .csv file - We can also initialize the instance with the csv table filter Filters the csv by country for average length's :return: CsvTable __read_csv Reads a csv file :return: List[Dict] quick_select_median Implementation quick select median sort :param values: List[tuple] :param pivot_fn: :param index: int :return: tuple","title":"CsvTable"},{"location":"csv_table/#csv-table-class","text":"","title":"Csv table class"},{"location":"csv_table/#class-csvtable","text":"Helps to handle .csv files data and its processing. A csv table is initialised using: csv_table = CsvTable(path_file) # file_path: The path to the .csv file - We can also initialize the instance with the csv table","title":"class CsvTable"},{"location":"csv_table/#filter","text":"Filters the csv by country for average length's :return: CsvTable","title":"filter"},{"location":"csv_table/#__read_csv","text":"Reads a csv file :return: List[Dict]","title":"__read_csv"},{"location":"csv_table/#quick_select_median","text":"Implementation quick select median sort :param values: List[tuple] :param pivot_fn: :param index: int :return: tuple","title":"quick_select_median"},{"location":"fasta_map/","text":"Fasta map class At first we create a named tuple that will contain the sample information needed for both sorting and filtering. We go through the CSV table once to create a dictionary as a key we will have the region and as a value a list where we will add those values registered in the named tuple. When we already have the dictionary, we pass the list to the function get_average_row that will return the sample line that has the average value in the samples of each region. Finally the list comprehension will filter the csv with our samples. class FastaMap Represents a Map that stores RNA codes. A fasta map is initialised using: fasta_map = FastaMap(path_file) # file_path: The path to the .fasta file _read_fasta Reads a fasta file and returns a dict where the keys are the accessions and the values are the RNA sequences :param: file_path :return: sequences: Dict[str, str] _get_rna Get the header and the RNA from a String :param: A String that contains info about the genome :return: A Id-value: Tuple[str, str] group_samples Creation Sets \"family samples\" :param: csv_table: :return: tuple of relations: Tuple[List[set]] compare_multi Function to parallelize comparisons :param ids : :return: Tuple of relations: Tuple[str, str, float] generate_relations Generate tuple of list where this list stores all sample's name :param compares: :return: Tuple relation of samples: Tuple[List[set]]","title":"FastaMap"},{"location":"fasta_map/#fasta-map-class","text":"At first we create a named tuple that will contain the sample information needed for both sorting and filtering. We go through the CSV table once to create a dictionary as a key we will have the region and as a value a list where we will add those values registered in the named tuple. When we already have the dictionary, we pass the list to the function get_average_row that will return the sample line that has the average value in the samples of each region. Finally the list comprehension will filter the csv with our samples.","title":"Fasta map class"},{"location":"fasta_map/#class-fastamap","text":"Represents a Map that stores RNA codes. A fasta map is initialised using: fasta_map = FastaMap(path_file) # file_path: The path to the .fasta file","title":"class FastaMap"},{"location":"fasta_map/#_read_fasta","text":"Reads a fasta file and returns a dict where the keys are the accessions and the values are the RNA sequences :param: file_path :return: sequences: Dict[str, str]","title":"_read_fasta"},{"location":"fasta_map/#_get_rna","text":"Get the header and the RNA from a String :param: A String that contains info about the genome :return: A Id-value: Tuple[str, str]","title":"_get_rna"},{"location":"fasta_map/#group_samples","text":"Creation Sets \"family samples\" :param: csv_table: :return: tuple of relations: Tuple[List[set]]","title":"group_samples"},{"location":"fasta_map/#compare_multi","text":"Function to parallelize comparisons :param ids : :return: Tuple of relations: Tuple[str, str, float]","title":"compare_multi"},{"location":"fasta_map/#generate_relations","text":"Generate tuple of list where this list stores all sample's name :param compares: :return: Tuple relation of samples: Tuple[List[set]]","title":"generate_relations"}]}